// Code generated by pigeon; DO NOT EDIT.

package grammar

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/mitchellh/pointerstructure"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 12, col: 1, offset: 103},
			expr: &choiceExpr{
				pos: position{line: 12, col: 10, offset: 112},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 12, col: 10, offset: 112},
						run: (*parser).callonInput2,
						expr: &seqExpr{
							pos: position{line: 12, col: 10, offset: 112},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 12, col: 10, offset: 112},
									expr: &ruleRefExpr{
										pos:  position{line: 12, col: 10, offset: 112},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 12, col: 13, offset: 115},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 12, col: 17, offset: 119},
									expr: &ruleRefExpr{
										pos:  position{line: 12, col: 17, offset: 119},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 12, col: 20, offset: 122},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 12, col: 25, offset: 127},
										name: "OrExpression",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 12, col: 38, offset: 140},
									expr: &ruleRefExpr{
										pos:  position{line: 12, col: 38, offset: 140},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 12, col: 41, offset: 143},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 12, col: 45, offset: 147},
									expr: &ruleRefExpr{
										pos:  position{line: 12, col: 45, offset: 147},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 12, col: 48, offset: 150},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 180},
						run: (*parser).callonInput17,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 180},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 14, col: 5, offset: 180},
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 5, offset: 180},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 8, offset: 183},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 13, offset: 188},
										name: "OrExpression",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 14, col: 26, offset: 201},
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 201},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 29, offset: 204},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "CollectionSelectorExpression",
			displayName: "\"collection-selector\"",
			pos:         position{line: 18, col: 1, offset: 233},
			expr: &actionExpr{
				pos: position{line: 18, col: 55, offset: 287},
				run: (*parser).callonCollectionSelectorExpression1,
				expr: &seqExpr{
					pos: position{line: 18, col: 55, offset: 287},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 18, col: 55, offset: 287},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 18, col: 59, offset: 291},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 18, col: 59, offset: 291},
										name: "CollectionOpAny",
									},
									&ruleRefExpr{
										pos:  position{line: 18, col: 77, offset: 309},
										name: "CollectionOpAll",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 94, offset: 326},
							label: "selector",
							expr: &ruleRefExpr{
								pos:  position{line: 18, col: 103, offset: 335},
								name: "Selector",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 18, col: 112, offset: 344},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 18, col: 114, offset: 346},
							val:        "as",
							ignoreCase: false,
							want:       "\"as\"",
						},
						&ruleRefExpr{
							pos:  position{line: 18, col: 119, offset: 351},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 18, col: 121, offset: 353},
							label: "binding",
							expr: &ruleRefExpr{
								pos:  position{line: 18, col: 129, offset: 361},
								name: "CollectionIdentifiers",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 18, col: 151, offset: 383},
							expr: &ruleRefExpr{
								pos:  position{line: 18, col: 151, offset: 383},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 18, col: 154, offset: 386},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 18, col: 158, offset: 390},
							expr: &ruleRefExpr{
								pos:  position{line: 18, col: 158, offset: 390},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 161, offset: 393},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 18, col: 166, offset: 398},
								name: "OrExpression",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 18, col: 179, offset: 411},
							expr: &ruleRefExpr{
								pos:  position{line: 18, col: 179, offset: 411},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 18, col: 182, offset: 414},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "OrExpression",
			pos:  position{line: 27, col: 1, offset: 635},
			expr: &choiceExpr{
				pos: position{line: 27, col: 17, offset: 651},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 17, offset: 651},
						run: (*parser).callonOrExpression2,
						expr: &seqExpr{
							pos: position{line: 27, col: 17, offset: 651},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 27, col: 17, offset: 651},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 22, offset: 656},
										name: "AndExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 36, offset: 670},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 27, col: 38, offset: 672},
									val:        "or",
									ignoreCase: false,
									want:       "\"or\"",
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 43, offset: 677},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 45, offset: 679},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 51, offset: 685},
										name: "OrExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 33, col: 5, offset: 835},
						run: (*parser).callonOrExpression11,
						expr: &labeledExpr{
							pos:   position{line: 33, col: 5, offset: 835},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 10, offset: 840},
								name: "AndExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "AndExpression",
			pos:  position{line: 37, col: 1, offset: 879},
			expr: &choiceExpr{
				pos: position{line: 37, col: 18, offset: 896},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 37, col: 18, offset: 896},
						run: (*parser).callonAndExpression2,
						expr: &seqExpr{
							pos: position{line: 37, col: 18, offset: 896},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 37, col: 18, offset: 896},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 37, col: 23, offset: 901},
										name: "NotExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 37, col: 37, offset: 915},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 37, col: 39, offset: 917},
									val:        "and",
									ignoreCase: false,
									want:       "\"and\"",
								},
								&ruleRefExpr{
									pos:  position{line: 37, col: 45, offset: 923},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 37, col: 47, offset: 925},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 37, col: 53, offset: 931},
										name: "AndExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1083},
						run: (*parser).callonAndExpression11,
						expr: &labeledExpr{
							pos:   position{line: 43, col: 5, offset: 1083},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 10, offset: 1088},
								name: "NotExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "NotExpression",
			pos:  position{line: 47, col: 1, offset: 1127},
			expr: &choiceExpr{
				pos: position{line: 47, col: 18, offset: 1144},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 47, col: 18, offset: 1144},
						run: (*parser).callonNotExpression2,
						expr: &seqExpr{
							pos: position{line: 47, col: 18, offset: 1144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 47, col: 18, offset: 1144},
									val:        "not",
									ignoreCase: false,
									want:       "\"not\"",
								},
								&ruleRefExpr{
									pos:  position{line: 47, col: 24, offset: 1150},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 47, col: 26, offset: 1152},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 47, col: 31, offset: 1157},
										name: "NotExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 58, col: 5, offset: 1544},
						run: (*parser).callonNotExpression8,
						expr: &labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1544},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 10, offset: 1549},
								name: "ParenthesizedExpression",
							},
						},
					},
				},
			},
		},
		{
			name:        "ParenthesizedExpression",
			displayName: "\"grouping\"",
			pos:         position{line: 62, col: 1, offset: 1598},
			expr: &choiceExpr{
				pos: position{line: 62, col: 39, offset: 1636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 62, col: 39, offset: 1636},
						run: (*parser).callonParenthesizedExpression2,
						expr: &seqExpr{
							pos: position{line: 62, col: 39, offset: 1636},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 39, offset: 1636},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 62, col: 43, offset: 1640},
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 43, offset: 1640},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 62, col: 46, offset: 1643},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 51, offset: 1648},
										name: "OrExpression",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 62, col: 64, offset: 1661},
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 64, offset: 1661},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 62, col: 67, offset: 1664},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 1694},
						run: (*parser).callonParenthesizedExpression12,
						expr: &labeledExpr{
							pos:   position{line: 64, col: 5, offset: 1694},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 10, offset: 1699},
								name: "MatchExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 66, col: 5, offset: 1741},
						run: (*parser).callonParenthesizedExpression15,
						expr: &labeledExpr{
							pos:   position{line: 66, col: 5, offset: 1741},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 10, offset: 1746},
								name: "CollectionSelectorExpression",
							},
						},
					},
					&seqExpr{
						pos: position{line: 68, col: 5, offset: 1805},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 68, col: 5, offset: 1805},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&zeroOrOneExpr{
								pos: position{line: 68, col: 9, offset: 1809},
								expr: &ruleRefExpr{
									pos:  position{line: 68, col: 9, offset: 1809},
									name: "_",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 12, offset: 1812},
								name: "OrExpression",
							},
							&zeroOrOneExpr{
								pos: position{line: 68, col: 25, offset: 1825},
								expr: &ruleRefExpr{
									pos:  position{line: 68, col: 25, offset: 1825},
									name: "_",
								},
							},
							&notExpr{
								pos: position{line: 68, col: 28, offset: 1828},
								expr: &litMatcher{
									pos:        position{line: 68, col: 29, offset: 1829},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
							&andCodeExpr{
								pos: position{line: 68, col: 33, offset: 1833},
								run: (*parser).callonParenthesizedExpression27,
							},
						},
					},
				},
			},
		},
		{
			name:        "CollectionIdentifiers",
			displayName: "\"collection-identifiers\"",
			pos:         position{line: 72, col: 1, offset: 1892},
			expr: &choiceExpr{
				pos: position{line: 72, col: 51, offset: 1942},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 72, col: 51, offset: 1942},
						run: (*parser).callonCollectionIdentifiers2,
						expr: &seqExpr{
							pos: position{line: 72, col: 51, offset: 1942},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 72, col: 51, offset: 1942},
									label: "id1",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 55, offset: 1946},
										name: "Identifier",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 72, col: 66, offset: 1957},
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 66, offset: 1957},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 72, col: 69, offset: 1960},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 72, col: 73, offset: 1964},
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 73, offset: 1964},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 72, col: 76, offset: 1967},
									label: "id2",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 80, offset: 1971},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2127},
						run: (*parser).callonCollectionIdentifiers13,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2127},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 78, col: 5, offset: 2127},
									label: "id1",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 9, offset: 2131},
										name: "Identifier",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 78, col: 20, offset: 2142},
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 20, offset: 2142},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 78, col: 23, offset: 2145},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 78, col: 27, offset: 2149},
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 27, offset: 2149},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 78, col: 30, offset: 2152},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2266},
						run: (*parser).callonCollectionIdentifiers23,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2266},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 83, col: 5, offset: 2266},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 83, col: 9, offset: 2270},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 9, offset: 2270},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 83, col: 12, offset: 2273},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 83, col: 16, offset: 2277},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 16, offset: 2277},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 83, col: 19, offset: 2280},
									label: "id2",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 23, offset: 2284},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 88, col: 5, offset: 2405},
						run: (*parser).callonCollectionIdentifiers33,
						expr: &labeledExpr{
							pos:   position{line: 88, col: 5, offset: 2405},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 8, offset: 2408},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name:        "MatchExpression",
			displayName: "\"match\"",
			pos:         position{line: 95, col: 1, offset: 2531},
			expr: &choiceExpr{
				pos: position{line: 95, col: 28, offset: 2558},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 28, offset: 2558},
						name: "MatchSelectorOpValue",
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 51, offset: 2581},
						name: "MatchSelectorOp",
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 69, offset: 2599},
						name: "MatchValueOpSelector",
					},
				},
			},
		},
		{
			name:        "MatchSelectorOpValue",
			displayName: "\"match\"",
			pos:         position{line: 97, col: 1, offset: 2621},
			expr: &actionExpr{
				pos: position{line: 97, col: 33, offset: 2653},
				run: (*parser).callonMatchSelectorOpValue1,
				expr: &seqExpr{
					pos: position{line: 97, col: 33, offset: 2653},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 97, col: 33, offset: 2653},
							label: "selector",
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 42, offset: 2662},
								name: "Selector",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 51, offset: 2671},
							label: "operator",
							expr: &choiceExpr{
								pos: position{line: 97, col: 61, offset: 2681},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 97, col: 61, offset: 2681},
										name: "MatchEqual",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 74, offset: 2694},
										name: "MatchNotEqual",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 90, offset: 2710},
										name: "MatchContains",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 106, offset: 2726},
										name: "MatchNotContains",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 125, offset: 2745},
										name: "MatchMatches",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 140, offset: 2760},
										name: "MatchNotMatches",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 158, offset: 2778},
										name: "MatchGreaterOrEqualThan",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 184, offset: 2804},
										name: "MatchGreaterThan",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 203, offset: 2823},
										name: "MatchLesserOrEqualThan",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 228, offset: 2848},
										name: "MatchLesserThan",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 245, offset: 2865},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 251, offset: 2871},
								name: "Value",
							},
						},
					},
				},
			},
		},
		{
			name:        "MatchSelectorOp",
			displayName: "\"match\"",
			pos:         position{line: 101, col: 1, offset: 3009},
			expr: &actionExpr{
				pos: position{line: 101, col: 28, offset: 3036},
				run: (*parser).callonMatchSelectorOp1,
				expr: &seqExpr{
					pos: position{line: 101, col: 28, offset: 3036},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 101, col: 28, offset: 3036},
							label: "selector",
							expr: &ruleRefExpr{
								pos:  position{line: 101, col: 37, offset: 3045},
								name: "Selector",
							},
						},
						&labeledExpr{
							pos:   position{line: 101, col: 46, offset: 3054},
							label: "operator",
							expr: &choiceExpr{
								pos: position{line: 101, col: 56, offset: 3064},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 101, col: 56, offset: 3064},
										name: "MatchIsEmpty",
									},
									&ruleRefExpr{
										pos:  position{line: 101, col: 71, offset: 3079},
										name: "MatchIsNotEmpty",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "MatchValueOpSelector",
			displayName: "\"match\"",
			pos:         position{line: 105, col: 1, offset: 3212},
			expr: &choiceExpr{
				pos: position{line: 105, col: 33, offset: 3244},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 105, col: 33, offset: 3244},
						run: (*parser).callonMatchValueOpSelector2,
						expr: &seqExpr{
							pos: position{line: 105, col: 33, offset: 3244},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 105, col: 33, offset: 3244},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 105, col: 39, offset: 3250},
										name: "Value",
									},
								},
								&labeledExpr{
									pos:   position{line: 105, col: 45, offset: 3256},
									label: "operator",
									expr: &choiceExpr{
										pos: position{line: 105, col: 55, offset: 3266},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 105, col: 55, offset: 3266},
												name: "MatchIn",
											},
											&ruleRefExpr{
												pos:  position{line: 105, col: 65, offset: 3276},
												name: "MatchNotIn",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 105, col: 77, offset: 3288},
									label: "selector",
									expr: &ruleRefExpr{
										pos:  position{line: 105, col: 86, offset: 3297},
										name: "Selector",
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 107, col: 5, offset: 3439},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 107, col: 5, offset: 3439},
								name: "Value",
							},
							&labeledExpr{
								pos:   position{line: 107, col: 11, offset: 3445},
								label: "operator",
								expr: &choiceExpr{
									pos: position{line: 107, col: 21, offset: 3455},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 107, col: 21, offset: 3455},
											name: "MatchIn",
										},
										&ruleRefExpr{
											pos:  position{line: 107, col: 31, offset: 3465},
											name: "MatchNotIn",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 107, col: 43, offset: 3477},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 44, offset: 3478},
									name: "Selector",
								},
							},
							&andCodeExpr{
								pos: position{line: 107, col: 53, offset: 3487},
								run: (*parser).callonMatchValueOpSelector20,
							},
						},
					},
				},
			},
		},
		{
			name: "MatchGreaterThan",
			pos:  position{line: 111, col: 1, offset: 3541},
			expr: &actionExpr{
				pos: position{line: 111, col: 21, offset: 3561},
				run: (*parser).callonMatchGreaterThan1,
				expr: &seqExpr{
					pos: position{line: 111, col: 21, offset: 3561},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 111, col: 21, offset: 3561},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 21, offset: 3561},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 111, col: 24, offset: 3564},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 111, col: 28, offset: 3568},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 28, offset: 3568},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "MatchGreaterOrEqualThan",
			pos:  position{line: 115, col: 1, offset: 3608},
			expr: &actionExpr{
				pos: position{line: 115, col: 28, offset: 3635},
				run: (*parser).callonMatchGreaterOrEqualThan1,
				expr: &seqExpr{
					pos: position{line: 115, col: 28, offset: 3635},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 115, col: 28, offset: 3635},
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 28, offset: 3635},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 115, col: 31, offset: 3638},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 115, col: 36, offset: 3643},
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 36, offset: 3643},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "MatchLesserThan",
			pos:  position{line: 119, col: 1, offset: 3690},
			expr: &actionExpr{
				pos: position{line: 119, col: 20, offset: 3709},
				run: (*parser).callonMatchLesserThan1,
				expr: &seqExpr{
					pos: position{line: 119, col: 20, offset: 3709},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 119, col: 20, offset: 3709},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 20, offset: 3709},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 119, col: 23, offset: 3712},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 119, col: 27, offset: 3716},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 27, offset: 3716},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "MatchLesserOrEqualThan",
			pos:  position{line: 123, col: 1, offset: 3755},
			expr: &actionExpr{
				pos: position{line: 123, col: 27, offset: 3781},
				run: (*parser).callonMatchLesserOrEqualThan1,
				expr: &seqExpr{
					pos: position{line: 123, col: 27, offset: 3781},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 123, col: 27, offset: 3781},
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 27, offset: 3781},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 123, col: 30, offset: 3784},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 123, col: 35, offset: 3789},
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 35, offset: 3789},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "MatchEqual",
			pos:  position{line: 127, col: 1, offset: 3835},
			expr: &actionExpr{
				pos: position{line: 127, col: 15, offset: 3849},
				run: (*parser).callonMatchEqual1,
				expr: &seqExpr{
					pos: position{line: 127, col: 15, offset: 3849},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 127, col: 15, offset: 3849},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 15, offset: 3849},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 127, col: 18, offset: 3852},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 127, col: 23, offset: 3857},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 23, offset: 3857},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "MatchNotEqual",
			pos:  position{line: 130, col: 1, offset: 3890},
			expr: &actionExpr{
				pos: position{line: 130, col: 18, offset: 3907},
				run: (*parser).callonMatchNotEqual1,
				expr: &seqExpr{
					pos: position{line: 130, col: 18, offset: 3907},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 130, col: 18, offset: 3907},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 18, offset: 3907},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 130, col: 21, offset: 3910},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 130, col: 26, offset: 3915},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 26, offset: 3915},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "MatchIsEmpty",
			pos:  position{line: 133, col: 1, offset: 3951},
			expr: &actionExpr{
				pos: position{line: 133, col: 17, offset: 3967},
				run: (*parser).callonMatchIsEmpty1,
				expr: &seqExpr{
					pos: position{line: 133, col: 17, offset: 3967},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 133, col: 17, offset: 3967},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 133, col: 19, offset: 3969},
							val:        "is",
							ignoreCase: false,
							want:       "\"is\"",
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 24, offset: 3974},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 133, col: 26, offset: 3976},
							val:        "empty",
							ignoreCase: false,
							want:       "\"empty\"",
						},
					},
				},
			},
		},
		{
			name: "MatchIsNotEmpty",
			pos:  position{line: 136, col: 1, offset: 4016},
			expr: &actionExpr{
				pos: position{line: 136, col: 20, offset: 4035},
				run: (*parser).callonMatchIsNotEmpty1,
				expr: &seqExpr{
					pos: position{line: 136, col: 20, offset: 4035},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 136, col: 20, offset: 4035},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 136, col: 21, offset: 4036},
							val:        "is",
							ignoreCase: false,
							want:       "\"is\"",
						},
						&ruleRefExpr{
							pos:  position{line: 136, col: 26, offset: 4041},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 136, col: 28, offset: 4043},
							val:        "not",
							ignoreCase: false,
							want:       "\"not\"",
						},
						&ruleRefExpr{
							pos:  position{line: 136, col: 34, offset: 4049},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 136, col: 36, offset: 4051},
							val:        "empty",
							ignoreCase: false,
							want:       "\"empty\"",
						},
					},
				},
			},
		},
		{
			name: "MatchIn",
			pos:  position{line: 139, col: 1, offset: 4094},
			expr: &actionExpr{
				pos: position{line: 139, col: 12, offset: 4105},
				run: (*parser).callonMatchIn1,
				expr: &seqExpr{
					pos: position{line: 139, col: 12, offset: 4105},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 139, col: 12, offset: 4105},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 139, col: 14, offset: 4107},
							val:        "in",
							ignoreCase: false,
							want:       "\"in\"",
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 19, offset: 4112},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MatchNotIn",
			pos:  position{line: 142, col: 1, offset: 4141},
			expr: &actionExpr{
				pos: position{line: 142, col: 15, offset: 4155},
				run: (*parser).callonMatchNotIn1,
				expr: &seqExpr{
					pos: position{line: 142, col: 15, offset: 4155},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 142, col: 15, offset: 4155},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 142, col: 17, offset: 4157},
							val:        "not",
							ignoreCase: false,
							want:       "\"not\"",
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 23, offset: 4163},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 142, col: 25, offset: 4165},
							val:        "in",
							ignoreCase: false,
							want:       "\"in\"",
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 30, offset: 4170},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MatchContains",
			pos:  position{line: 145, col: 1, offset: 4202},
			expr: &actionExpr{
				pos: position{line: 145, col: 18, offset: 4219},
				run: (*parser).callonMatchContains1,
				expr: &seqExpr{
					pos: position{line: 145, col: 18, offset: 4219},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 145, col: 18, offset: 4219},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 145, col: 20, offset: 4221},
							val:        "contains",
							ignoreCase: false,
							want:       "\"contains\"",
						},
						&ruleRefExpr{
							pos:  position{line: 145, col: 31, offset: 4232},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MatchNotContains",
			pos:  position{line: 148, col: 1, offset: 4261},
			expr: &actionExpr{
				pos: position{line: 148, col: 21, offset: 4281},
				run: (*parser).callonMatchNotContains1,
				expr: &seqExpr{
					pos: position{line: 148, col: 21, offset: 4281},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 148, col: 21, offset: 4281},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 148, col: 23, offset: 4283},
							val:        "not",
							ignoreCase: false,
							want:       "\"not\"",
						},
						&ruleRefExpr{
							pos:  position{line: 148, col: 29, offset: 4289},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 148, col: 31, offset: 4291},
							val:        "contains",
							ignoreCase: false,
							want:       "\"contains\"",
						},
						&ruleRefExpr{
							pos:  position{line: 148, col: 42, offset: 4302},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MatchMatches",
			pos:  position{line: 151, col: 1, offset: 4334},
			expr: &actionExpr{
				pos: position{line: 151, col: 17, offset: 4350},
				run: (*parser).callonMatchMatches1,
				expr: &seqExpr{
					pos: position{line: 151, col: 17, offset: 4350},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 151, col: 17, offset: 4350},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 151, col: 19, offset: 4352},
							val:        "matches",
							ignoreCase: false,
							want:       "\"matches\"",
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 29, offset: 4362},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MatchNotMatches",
			pos:  position{line: 154, col: 1, offset: 4396},
			expr: &actionExpr{
				pos: position{line: 154, col: 20, offset: 4415},
				run: (*parser).callonMatchNotMatches1,
				expr: &seqExpr{
					pos: position{line: 154, col: 20, offset: 4415},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 154, col: 20, offset: 4415},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 154, col: 22, offset: 4417},
							val:        "not",
							ignoreCase: false,
							want:       "\"not\"",
						},
						&ruleRefExpr{
							pos:  position{line: 154, col: 28, offset: 4423},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 154, col: 30, offset: 4425},
							val:        "matches",
							ignoreCase: false,
							want:       "\"matches\"",
						},
						&ruleRefExpr{
							pos:  position{line: 154, col: 40, offset: 4435},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "CollectionOpAny",
			pos:  position{line: 158, col: 1, offset: 4473},
			expr: &actionExpr{
				pos: position{line: 158, col: 20, offset: 4492},
				run: (*parser).callonCollectionOpAny1,
				expr: &seqExpr{
					pos: position{line: 158, col: 20, offset: 4492},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 158, col: 20, offset: 4492},
							val:        "any",
							ignoreCase: false,
							want:       "\"any\"",
						},
						&ruleRefExpr{
							pos:  position{line: 158, col: 26, offset: 4498},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "CollectionOpAll",
			pos:  position{line: 162, col: 1, offset: 4536},
			expr: &actionExpr{
				pos: position{line: 162, col: 20, offset: 4555},
				run: (*parser).callonCollectionOpAll1,
				expr: &seqExpr{
					pos: position{line: 162, col: 20, offset: 4555},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 162, col: 20, offset: 4555},
							val:        "all",
							ignoreCase: false,
							want:       "\"all\"",
						},
						&ruleRefExpr{
							pos:  position{line: 162, col: 26, offset: 4561},
							name: "_",
						},
					},
				},
			},
		},
		{
			name:        "Selector",
			displayName: "\"selector\"",
			pos:         position{line: 166, col: 1, offset: 4599},
			expr: &choiceExpr{
				pos: position{line: 166, col: 24, offset: 4622},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 166, col: 24, offset: 4622},
						run: (*parser).callonSelector2,
						expr: &seqExpr{
							pos: position{line: 166, col: 24, offset: 4622},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 166, col: 24, offset: 4622},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 30, offset: 4628},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 166, col: 41, offset: 4639},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 166, col: 46, offset: 4644},
										expr: &ruleRefExpr{
											pos:  position{line: 166, col: 46, offset: 4644},
											name: "SelectorOrIndex",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 177, col: 5, offset: 4908},
						run: (*parser).callonSelector9,
						expr: &seqExpr{
							pos: position{line: 177, col: 5, offset: 4908},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 177, col: 5, offset: 4908},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 177, col: 9, offset: 4912},
									label: "ptrsegs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 177, col: 17, offset: 4920},
										expr: &ruleRefExpr{
											pos:  position{line: 177, col: 17, offset: 4920},
											name: "JsonPointerSegment",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 177, col: 37, offset: 4940},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JsonPointerSegment",
			pos:  position{line: 198, col: 1, offset: 5418},
			expr: &actionExpr{
				pos: position{line: 198, col: 23, offset: 5440},
				run: (*parser).callonJsonPointerSegment1,
				expr: &seqExpr{
					pos: position{line: 198, col: 23, offset: 5440},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 198, col: 23, offset: 5440},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&labeledExpr{
							pos:   position{line: 198, col: 27, offset: 5444},
							label: "ident",
							expr: &oneOrMoreExpr{
								pos: position{line: 198, col: 33, offset: 5450},
								expr: &charClassMatcher{
									pos:        position{line: 198, col: 33, offset: 5450},
									val:        "[\\pL\\pN-_.~:|]",
									chars:      []rune{'-', '_', '.', '~', ':', '|'},
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 202, col: 1, offset: 5505},
			expr: &actionExpr{
				pos: position{line: 202, col: 15, offset: 5519},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 202, col: 15, offset: 5519},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 202, col: 15, offset: 5519},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 202, col: 24, offset: 5528},
							expr: &charClassMatcher{
								pos:        position{line: 202, col: 24, offset: 5528},
								val:        "[a-zA-Z0-9_/]",
								chars:      []rune{'_', '/'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SelectorOrIndex",
			pos:  position{line: 206, col: 1, offset: 5578},
			expr: &choiceExpr{
				pos: position{line: 206, col: 20, offset: 5597},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 206, col: 20, offset: 5597},
						run: (*parser).callonSelectorOrIndex2,
						expr: &seqExpr{
							pos: position{line: 206, col: 20, offset: 5597},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 206, col: 20, offset: 5597},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 206, col: 24, offset: 5601},
									label: "ident",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 30, offset: 5607},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 5645},
						run: (*parser).callonSelectorOrIndex7,
						expr: &labeledExpr{
							pos:   position{line: 208, col: 5, offset: 5645},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 10, offset: 5650},
								name: "IndexExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 210, col: 5, offset: 5692},
						run: (*parser).callonSelectorOrIndex10,
						expr: &seqExpr{
							pos: position{line: 210, col: 5, offset: 5692},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 210, col: 5, offset: 5692},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 210, col: 9, offset: 5696},
									label: "idx",
									expr: &oneOrMoreExpr{
										pos: position{line: 210, col: 13, offset: 5700},
										expr: &charClassMatcher{
											pos:        position{line: 210, col: 13, offset: 5700},
											val:        "[0-9]",
											ranges:     []rune{'0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "IndexExpression",
			displayName: "\"index\"",
			pos:         position{line: 214, col: 1, offset: 5746},
			expr: &choiceExpr{
				pos: position{line: 214, col: 28, offset: 5773},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 214, col: 28, offset: 5773},
						run: (*parser).callonIndexExpression2,
						expr: &seqExpr{
							pos: position{line: 214, col: 28, offset: 5773},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 214, col: 28, offset: 5773},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 214, col: 32, offset: 5777},
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 32, offset: 5777},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 214, col: 35, offset: 5780},
									label: "lit",
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 39, offset: 5784},
										name: "StringLiteral",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 214, col: 53, offset: 5798},
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 53, offset: 5798},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 214, col: 56, offset: 5801},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 216, col: 5, offset: 5830},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 216, col: 5, offset: 5830},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&zeroOrOneExpr{
								pos: position{line: 216, col: 9, offset: 5834},
								expr: &ruleRefExpr{
									pos:  position{line: 216, col: 9, offset: 5834},
									name: "_",
								},
							},
							&notExpr{
								pos: position{line: 216, col: 12, offset: 5837},
								expr: &ruleRefExpr{
									pos:  position{line: 216, col: 13, offset: 5838},
									name: "StringLiteral",
								},
							},
							&andCodeExpr{
								pos: position{line: 216, col: 27, offset: 5852},
								run: (*parser).callonIndexExpression18,
							},
						},
					},
					&seqExpr{
						pos: position{line: 218, col: 5, offset: 5904},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 218, col: 5, offset: 5904},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&zeroOrOneExpr{
								pos: position{line: 218, col: 9, offset: 5908},
								expr: &ruleRefExpr{
									pos:  position{line: 218, col: 9, offset: 5908},
									name: "_",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 218, col: 12, offset: 5911},
								name: "StringLiteral",
							},
							&zeroOrOneExpr{
								pos: position{line: 218, col: 26, offset: 5925},
								expr: &ruleRefExpr{
									pos:  position{line: 218, col: 26, offset: 5925},
									name: "_",
								},
							},
							&notExpr{
								pos: position{line: 218, col: 29, offset: 5928},
								expr: &litMatcher{
									pos:        position{line: 218, col: 30, offset: 5929},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
							&andCodeExpr{
								pos: position{line: 218, col: 34, offset: 5933},
								run: (*parser).callonIndexExpression28,
							},
						},
					},
				},
			},
		},
		{
			name:        "Value",
			displayName: "\"value\"",
			pos:         position{line: 222, col: 1, offset: 5996},
			expr: &choiceExpr{
				pos: position{line: 222, col: 18, offset: 6013},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 222, col: 18, offset: 6013},
						run: (*parser).callonValue2,
						expr: &labeledExpr{
							pos:   position{line: 222, col: 18, offset: 6013},
							label: "selector",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 27, offset: 6022},
								name: "Selector",
							},
						},
					},
					&actionExpr{
						pos: position{line: 224, col: 5, offset: 6098},
						run: (*parser).callonValue5,
						expr: &labeledExpr{
							pos:   position{line: 224, col: 5, offset: 6098},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 7, offset: 6100},
								name: "NumberLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 226, col: 5, offset: 6164},
						run: (*parser).callonValue8,
						expr: &labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6164},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 7, offset: 6166},
								name: "StringLiteral",
							},
						},
					},
				},
			},
		},
		{
			name:        "NumberLiteral",
			displayName: "\"number\"",
			pos:         position{line: 230, col: 1, offset: 6229},
			expr: &choiceExpr{
				pos: position{line: 230, col: 27, offset: 6255},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 230, col: 27, offset: 6255},
						run: (*parser).callonNumberLiteral2,
						expr: &seqExpr{
							pos: position{line: 230, col: 27, offset: 6255},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 230, col: 27, offset: 6255},
									expr: &litMatcher{
										pos:        position{line: 230, col: 27, offset: 6255},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 230, col: 32, offset: 6260},
									name: "IntegerOrFloat",
								},
								&andExpr{
									pos: position{line: 230, col: 47, offset: 6275},
									expr: &ruleRefExpr{
										pos:  position{line: 230, col: 48, offset: 6276},
										name: "AfterNumbers",
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 232, col: 5, offset: 6325},
						exprs: []interface{}{
							&zeroOrOneExpr{
								pos: position{line: 232, col: 5, offset: 6325},
								expr: &litMatcher{
									pos:        position{line: 232, col: 5, offset: 6325},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 232, col: 10, offset: 6330},
								name: "IntegerOrFloat",
							},
							&notExpr{
								pos: position{line: 232, col: 25, offset: 6345},
								expr: &ruleRefExpr{
									pos:  position{line: 232, col: 26, offset: 6346},
									name: "AfterNumbers",
								},
							},
							&andCodeExpr{
								pos: position{line: 232, col: 39, offset: 6359},
								run: (*parser).callonNumberLiteral15,
							},
						},
					},
				},
			},
		},
		{
			name: "AfterNumbers",
			pos:  position{line: 236, col: 1, offset: 6419},
			expr: &andExpr{
				pos: position{line: 236, col: 17, offset: 6435},
				expr: &choiceExpr{
					pos: position{line: 236, col: 19, offset: 6437},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 236, col: 19, offset: 6437},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 236, col: 23, offset: 6441},
							name: "EOF",
						},
						&litMatcher{
							pos:        position{line: 236, col: 29, offset: 6447},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IntegerOrFloat",
			pos:  position{line: 238, col: 1, offset: 6453},
			expr: &seqExpr{
				pos: position{line: 238, col: 19, offset: 6471},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 238, col: 20, offset: 6472},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 238, col: 20, offset: 6472},
								val:        "0",
								ignoreCase: false,
								want:       "\"0\"",
							},
							&seqExpr{
								pos: position{line: 238, col: 26, offset: 6478},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 238, col: 26, offset: 6478},
										val:        "[1-9]",
										ranges:     []rune{'1', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 238, col: 31, offset: 6483},
										expr: &charClassMatcher{
											pos:        position{line: 238, col: 31, offset: 6483},
											val:        "[0-9]",
											ranges:     []rune{'0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 238, col: 39, offset: 6491},
						expr: &seqExpr{
							pos: position{line: 238, col: 40, offset: 6492},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 238, col: 40, offset: 6492},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 238, col: 44, offset: 6496},
									expr: &charClassMatcher{
										pos:        position{line: 238, col: 44, offset: 6496},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "StringLiteral",
			displayName: "\"string\"",
			pos:         position{line: 240, col: 1, offset: 6506},
			expr: &choiceExpr{
				pos: position{line: 240, col: 27, offset: 6532},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 240, col: 27, offset: 6532},
						run: (*parser).callonStringLiteral2,
						expr: &choiceExpr{
							pos: position{line: 240, col: 28, offset: 6533},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 240, col: 28, offset: 6533},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 240, col: 28, offset: 6533},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 240, col: 32, offset: 6537},
											expr: &ruleRefExpr{
												pos:  position{line: 240, col: 32, offset: 6537},
												name: "RawStringChar",
											},
										},
										&litMatcher{
											pos:        position{line: 240, col: 47, offset: 6552},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 240, col: 53, offset: 6558},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 240, col: 53, offset: 6558},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 240, col: 57, offset: 6562},
											expr: &ruleRefExpr{
												pos:  position{line: 240, col: 57, offset: 6562},
												name: "DoubleStringChar",
											},
										},
										&litMatcher{
											pos:        position{line: 240, col: 75, offset: 6580},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 242, col: 5, offset: 6632},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 242, col: 6, offset: 6633},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 242, col: 6, offset: 6633},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 242, col: 6, offset: 6633},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 242, col: 10, offset: 6637},
												expr: &ruleRefExpr{
													pos:  position{line: 242, col: 10, offset: 6637},
													name: "RawStringChar",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 242, col: 27, offset: 6654},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 242, col: 27, offset: 6654},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 242, col: 31, offset: 6658},
												expr: &ruleRefExpr{
													pos:  position{line: 242, col: 31, offset: 6658},
													name: "DoubleStringChar",
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 242, col: 50, offset: 6677},
								name: "EOF",
							},
							&andCodeExpr{
								pos: position{line: 242, col: 54, offset: 6681},
								run: (*parser).callonStringLiteral25,
							},
						},
					},
				},
			},
		},
		{
			name: "RawStringChar",
			pos:  position{line: 246, col: 1, offset: 6745},
			expr: &seqExpr{
				pos: position{line: 246, col: 18, offset: 6762},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 246, col: 18, offset: 6762},
						expr: &litMatcher{
							pos:        position{line: 246, col: 19, offset: 6763},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
					&anyMatcher{
						line: 246, col: 23, offset: 6767,
					},
				},
			},
		},
		{
			name: "DoubleStringChar",
			pos:  position{line: 247, col: 1, offset: 6769},
			expr: &seqExpr{
				pos: position{line: 247, col: 21, offset: 6789},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 247, col: 21, offset: 6789},
						expr: &litMatcher{
							pos:        position{line: 247, col: 22, offset: 6790},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
					&anyMatcher{
						line: 247, col: 26, offset: 6794,
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 249, col: 1, offset: 6797},
			expr: &oneOrMoreExpr{
				pos: position{line: 249, col: 19, offset: 6815},
				expr: &charClassMatcher{
					pos:        position{line: 249, col: 19, offset: 6815},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 251, col: 1, offset: 6827},
			expr: &notExpr{
				pos: position{line: 251, col: 8, offset: 6834},
				expr: &anyMatcher{
					line: 251, col: 9, offset: 6835,
				},
			},
		},
	},
}

func (c *current) onInput2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput2(stack["expr"])
}

func (c *current) onInput17(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonInput17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput17(stack["expr"])
}

func (c *current) onCollectionSelectorExpression1(op, selector, binding, expr interface{}) (interface{}, error) {
	return &CollectionExpression{
		Operator:    op.(CollectionOperator),
		Selector:    selector.(Selector),
		NameBinding: *binding.(*CollectionNameBinding),
		Expression:  expr.(Expression),
	}, nil
}

func (p *parser) callonCollectionSelectorExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCollectionSelectorExpression1(stack["op"], stack["selector"], stack["binding"], stack["expr"])
}

func (c *current) onOrExpression2(left, right interface{}) (interface{}, error) {
	return &BinaryExpression{
		Operator: BinaryOpOr,
		Left:     left.(Expression),
		Right:    right.(Expression),
	}, nil
}

func (p *parser) callonOrExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression2(stack["left"], stack["right"])
}

func (c *current) onOrExpression11(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonOrExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression11(stack["expr"])
}

func (c *current) onAndExpression2(left, right interface{}) (interface{}, error) {
	return &BinaryExpression{
		Operator: BinaryOpAnd,
		Left:     left.(Expression),
		Right:    right.(Expression),
	}, nil
}

func (p *parser) callonAndExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression2(stack["left"], stack["right"])
}

func (c *current) onAndExpression11(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonAndExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression11(stack["expr"])
}

func (c *current) onNotExpression2(expr interface{}) (interface{}, error) {
	if unary, ok := expr.(*UnaryExpression); ok && unary.Operator == UnaryOpNot {
		// small optimization to get rid unnecessary levels of AST nodes
		// for things like:  not not foo == 3  which is equivalent to foo == 3
		return unary.Operand, nil
	}

	return &UnaryExpression{
		Operator: UnaryOpNot,
		Operand:  expr.(Expression),
	}, nil
}

func (p *parser) callonNotExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpression2(stack["expr"])
}

func (c *current) onNotExpression8(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonNotExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpression8(stack["expr"])
}

func (c *current) onParenthesizedExpression2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonParenthesizedExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenthesizedExpression2(stack["expr"])
}

func (c *current) onParenthesizedExpression12(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonParenthesizedExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenthesizedExpression12(stack["expr"])
}

func (c *current) onParenthesizedExpression15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonParenthesizedExpression15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenthesizedExpression15(stack["expr"])
}

func (c *current) onParenthesizedExpression27() (bool, error) {
	return false, errors.New("Unmatched parentheses")
}

func (p *parser) callonParenthesizedExpression27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenthesizedExpression27()
}

func (c *current) onCollectionIdentifiers2(id1, id2 interface{}) (interface{}, error) {
	return &CollectionNameBinding{
		Mode:  CollectionBindIndexAndValue,
		Index: id1.(string),
		Value: id2.(string),
	}, nil
}

func (p *parser) callonCollectionIdentifiers2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCollectionIdentifiers2(stack["id1"], stack["id2"])
}

func (c *current) onCollectionIdentifiers13(id1 interface{}) (interface{}, error) {
	return &CollectionNameBinding{
		Mode:  CollectionBindIndex,
		Index: id1.(string),
	}, nil
}

func (p *parser) callonCollectionIdentifiers13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCollectionIdentifiers13(stack["id1"])
}

func (c *current) onCollectionIdentifiers23(id2 interface{}) (interface{}, error) {
	return &CollectionNameBinding{
		Mode:  CollectionBindValue,
		Value: id2.(string),
	}, nil
}

func (p *parser) callonCollectionIdentifiers23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCollectionIdentifiers23(stack["id2"])
}

func (c *current) onCollectionIdentifiers33(id interface{}) (interface{}, error) {
	return &CollectionNameBinding{
		Mode:    CollectionBindDefault,
		Default: id.(string),
	}, nil
}

func (p *parser) callonCollectionIdentifiers33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCollectionIdentifiers33(stack["id"])
}

func (c *current) onMatchSelectorOpValue1(selector, operator, value interface{}) (interface{}, error) {
	return &MatchExpression{Selector: selector.(Selector), Operator: operator.(MatchOperator), Value: value.(*MatchValue)}, nil
}

func (p *parser) callonMatchSelectorOpValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchSelectorOpValue1(stack["selector"], stack["operator"], stack["value"])
}

func (c *current) onMatchSelectorOp1(selector, operator interface{}) (interface{}, error) {
	return &MatchExpression{Selector: selector.(Selector), Operator: operator.(MatchOperator), Value: nil}, nil
}

func (p *parser) callonMatchSelectorOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchSelectorOp1(stack["selector"], stack["operator"])
}

func (c *current) onMatchValueOpSelector2(value, operator, selector interface{}) (interface{}, error) {
	return &MatchExpression{Selector: selector.(Selector), Operator: operator.(MatchOperator), Value: value.(*MatchValue)}, nil
}

func (p *parser) callonMatchValueOpSelector2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchValueOpSelector2(stack["value"], stack["operator"], stack["selector"])
}

func (c *current) onMatchValueOpSelector20(operator interface{}) (bool, error) {
	return false, errors.New("Invalid selector")
}

func (p *parser) callonMatchValueOpSelector20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchValueOpSelector20(stack["operator"])
}

func (c *current) onMatchGreaterThan1() (interface{}, error) {
	return MatchGreaterThan, nil
}

func (p *parser) callonMatchGreaterThan1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchGreaterThan1()
}

func (c *current) onMatchGreaterOrEqualThan1() (interface{}, error) {
	return MatchGreaterOrEqualThan, nil
}

func (p *parser) callonMatchGreaterOrEqualThan1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchGreaterOrEqualThan1()
}

func (c *current) onMatchLesserThan1() (interface{}, error) {
	return MatchLesserThan, nil
}

func (p *parser) callonMatchLesserThan1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchLesserThan1()
}

func (c *current) onMatchLesserOrEqualThan1() (interface{}, error) {
	return MatchLesserOrEqualThan, nil
}

func (p *parser) callonMatchLesserOrEqualThan1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchLesserOrEqualThan1()
}

func (c *current) onMatchEqual1() (interface{}, error) {
	return MatchEqual, nil
}

func (p *parser) callonMatchEqual1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchEqual1()
}

func (c *current) onMatchNotEqual1() (interface{}, error) {
	return MatchNotEqual, nil
}

func (p *parser) callonMatchNotEqual1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchNotEqual1()
}

func (c *current) onMatchIsEmpty1() (interface{}, error) {
	return MatchIsEmpty, nil
}

func (p *parser) callonMatchIsEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchIsEmpty1()
}

func (c *current) onMatchIsNotEmpty1() (interface{}, error) {
	return MatchIsNotEmpty, nil
}

func (p *parser) callonMatchIsNotEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchIsNotEmpty1()
}

func (c *current) onMatchIn1() (interface{}, error) {
	return MatchIn, nil
}

func (p *parser) callonMatchIn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchIn1()
}

func (c *current) onMatchNotIn1() (interface{}, error) {
	return MatchNotIn, nil
}

func (p *parser) callonMatchNotIn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchNotIn1()
}

func (c *current) onMatchContains1() (interface{}, error) {
	return MatchIn, nil
}

func (p *parser) callonMatchContains1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchContains1()
}

func (c *current) onMatchNotContains1() (interface{}, error) {
	return MatchNotIn, nil
}

func (p *parser) callonMatchNotContains1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchNotContains1()
}

func (c *current) onMatchMatches1() (interface{}, error) {
	return MatchMatches, nil
}

func (p *parser) callonMatchMatches1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchMatches1()
}

func (c *current) onMatchNotMatches1() (interface{}, error) {
	return MatchNotMatches, nil
}

func (p *parser) callonMatchNotMatches1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchNotMatches1()
}

func (c *current) onCollectionOpAny1() (interface{}, error) {
	return CollectionOpAny, nil
}

func (p *parser) callonCollectionOpAny1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCollectionOpAny1()
}

func (c *current) onCollectionOpAll1() (interface{}, error) {
	return CollectionOpAll, nil
}

func (p *parser) callonCollectionOpAll1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCollectionOpAll1()
}

func (c *current) onSelector2(first, rest interface{}) (interface{}, error) {
	sel := Selector{
		Type: SelectorTypeBexpr,
		Path: []string{first.(string)},
	}
	if rest != nil {
		for _, v := range rest.([]interface{}) {
			sel.Path = append(sel.Path, v.(string))
		}
	}
	return sel, nil
}

func (p *parser) callonSelector2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector2(stack["first"], stack["rest"])
}

func (c *current) onSelector9(ptrsegs interface{}) (interface{}, error) {
	sel := Selector{
		Type: SelectorTypeJsonPointer,
	}
	if ptrsegs != nil {
		for _, v := range ptrsegs.([]interface{}) {
			sel.Path = append(sel.Path, v.(string))
		}
	}

	// Validate and cache
	ptrStr := fmt.Sprintf("/%s", strings.Join(sel.Path, "/"))
	ptr, err := pointerstructure.Parse(ptrStr)
	if err != nil {
		return nil, fmt.Errorf("error validating json pointer: %w", err)
	}
	sel.Path = ptr.Parts

	return sel, nil
}

func (p *parser) callonSelector9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector9(stack["ptrsegs"])
}

func (c *current) onJsonPointerSegment1(ident interface{}) (interface{}, error) {
	return string(c.text)[1:], nil
}

func (p *parser) callonJsonPointerSegment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJsonPointerSegment1(stack["ident"])
}

func (c *current) onIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onSelectorOrIndex2(ident interface{}) (interface{}, error) {
	return ident, nil
}

func (p *parser) callonSelectorOrIndex2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectorOrIndex2(stack["ident"])
}

func (c *current) onSelectorOrIndex7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSelectorOrIndex7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectorOrIndex7(stack["expr"])
}

func (c *current) onSelectorOrIndex10(idx interface{}) (interface{}, error) {
	return string(c.text)[1:], nil
}

func (p *parser) callonSelectorOrIndex10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectorOrIndex10(stack["idx"])
}

func (c *current) onIndexExpression2(lit interface{}) (interface{}, error) {
	return lit, nil
}

func (p *parser) callonIndexExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression2(stack["lit"])
}

func (c *current) onIndexExpression18() (bool, error) {
	return false, errors.New("Invalid index")
}

func (p *parser) callonIndexExpression18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression18()
}

func (c *current) onIndexExpression28() (bool, error) {
	return false, errors.New("Unclosed index expression")
}

func (p *parser) callonIndexExpression28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression28()
}

func (c *current) onValue2(selector interface{}) (interface{}, error) {
	return &MatchValue{Raw: selector.(Selector).String()}, nil
}

func (p *parser) callonValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue2(stack["selector"])
}

func (c *current) onValue5(n interface{}) (interface{}, error) {
	return &MatchValue{Raw: n.(string)}, nil
}

func (p *parser) callonValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue5(stack["n"])
}

func (c *current) onValue8(s interface{}) (interface{}, error) {
	return &MatchValue{Raw: s.(string)}, nil
}

func (p *parser) callonValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue8(stack["s"])
}

func (c *current) onNumberLiteral2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNumberLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberLiteral2()
}

func (c *current) onNumberLiteral15() (bool, error) {
	return false, errors.New("Invalid number literal")
}

func (p *parser) callonNumberLiteral15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberLiteral15()
}

func (c *current) onStringLiteral2() (interface{}, error) {
	return strconv.Unquote(string(c.text))
}

func (p *parser) callonStringLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral2()
}

func (c *current) onStringLiteral25() (bool, error) {
	return false, errors.New("Unterminated string literal")
}

func (p *parser) callonStringLiteral25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral25()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
