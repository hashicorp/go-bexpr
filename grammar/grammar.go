// Code generated by pigeon; DO NOT EDIT.

package grammar

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/mitchellh/pointerstructure"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 12, col: 1, offset: 103},
			expr: &choiceExpr{
				pos: position{line: 12, col: 10, offset: 112},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 12, col: 10, offset: 112},
						run: (*parser).callonInput2,
						expr: &seqExpr{
							pos: position{line: 12, col: 10, offset: 112},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 12, col: 10, offset: 112},
									expr: &ruleRefExpr{
										pos:  position{line: 12, col: 10, offset: 112},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 12, col: 13, offset: 115},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 12, col: 17, offset: 119},
									expr: &ruleRefExpr{
										pos:  position{line: 12, col: 17, offset: 119},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 12, col: 20, offset: 122},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 12, col: 25, offset: 127},
										name: "OrExpression",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 12, col: 38, offset: 140},
									expr: &ruleRefExpr{
										pos:  position{line: 12, col: 38, offset: 140},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 12, col: 41, offset: 143},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 12, col: 45, offset: 147},
									expr: &ruleRefExpr{
										pos:  position{line: 12, col: 45, offset: 147},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 12, col: 48, offset: 150},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 180},
						run: (*parser).callonInput17,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 180},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 14, col: 5, offset: 180},
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 5, offset: 180},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 8, offset: 183},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 13, offset: 188},
										name: "OrExpression",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 14, col: 26, offset: 201},
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 201},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 29, offset: 204},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrExpression",
			pos:  position{line: 18, col: 1, offset: 233},
			expr: &choiceExpr{
				pos: position{line: 18, col: 17, offset: 249},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 18, col: 17, offset: 249},
						run: (*parser).callonOrExpression2,
						expr: &seqExpr{
							pos: position{line: 18, col: 17, offset: 249},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 18, col: 17, offset: 249},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 18, col: 22, offset: 254},
										name: "AndExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 18, col: 36, offset: 268},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 18, col: 38, offset: 270},
									val:        "or",
									ignoreCase: false,
									want:       "\"or\"",
								},
								&ruleRefExpr{
									pos:  position{line: 18, col: 43, offset: 275},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 18, col: 45, offset: 277},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 18, col: 51, offset: 283},
										name: "OrExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 24, col: 5, offset: 433},
						run: (*parser).callonOrExpression11,
						expr: &labeledExpr{
							pos:   position{line: 24, col: 5, offset: 433},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 10, offset: 438},
								name: "AndExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 478},
						run: (*parser).callonOrExpression14,
						expr: &labeledExpr{
							pos:   position{line: 26, col: 5, offset: 478},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 10, offset: 483},
								name: "CollectionExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 28, col: 5, offset: 530},
						run: (*parser).callonOrExpression17,
						expr: &labeledExpr{
							pos:   position{line: 28, col: 5, offset: 530},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 10, offset: 535},
								name: "CollectionExpressionWithKey",
							},
						},
					},
				},
			},
		},
		{
			name: "AndExpression",
			pos:  position{line: 32, col: 1, offset: 588},
			expr: &choiceExpr{
				pos: position{line: 32, col: 18, offset: 605},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 32, col: 18, offset: 605},
						run: (*parser).callonAndExpression2,
						expr: &seqExpr{
							pos: position{line: 32, col: 18, offset: 605},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 32, col: 18, offset: 605},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 32, col: 23, offset: 610},
										name: "NotExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 32, col: 37, offset: 624},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 32, col: 39, offset: 626},
									val:        "and",
									ignoreCase: false,
									want:       "\"and\"",
								},
								&ruleRefExpr{
									pos:  position{line: 32, col: 45, offset: 632},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 32, col: 47, offset: 634},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 32, col: 53, offset: 640},
										name: "AndExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 792},
						run: (*parser).callonAndExpression11,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 792},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 10, offset: 797},
								name: "NotExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "NotExpression",
			pos:  position{line: 42, col: 1, offset: 836},
			expr: &choiceExpr{
				pos: position{line: 42, col: 18, offset: 853},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 42, col: 18, offset: 853},
						run: (*parser).callonNotExpression2,
						expr: &seqExpr{
							pos: position{line: 42, col: 18, offset: 853},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 42, col: 18, offset: 853},
									val:        "not",
									ignoreCase: false,
									want:       "\"not\"",
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 24, offset: 859},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 42, col: 26, offset: 861},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 42, col: 31, offset: 866},
										name: "NotExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1253},
						run: (*parser).callonNotExpression8,
						expr: &labeledExpr{
							pos:   position{line: 53, col: 5, offset: 1253},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 10, offset: 1258},
								name: "ParenthesizedExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "CollectionExpression",
			pos:  position{line: 57, col: 1, offset: 1307},
			expr: &actionExpr{
				pos: position{line: 57, col: 25, offset: 1331},
				run: (*parser).callonCollectionExpression1,
				expr: &seqExpr{
					pos: position{line: 57, col: 25, offset: 1331},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 57, col: 25, offset: 1331},
							label: "operator",
							expr: &choiceExpr{
								pos: position{line: 57, col: 35, offset: 1341},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 57, col: 35, offset: 1341},
										val:        "all",
										ignoreCase: false,
										want:       "\"all\"",
									},
									&litMatcher{
										pos:        position{line: 57, col: 41, offset: 1347},
										val:        "any",
										ignoreCase: false,
										want:       "\"any\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 48, offset: 1354},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 50, offset: 1356},
							label: "selector",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 59, offset: 1365},
								name: "Selector",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 68, offset: 1374},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 57, col: 70, offset: 1376},
							val:        "as",
							ignoreCase: false,
							want:       "\"as\"",
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 75, offset: 1381},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 77, offset: 1383},
							label: "ident",
							expr: &choiceExpr{
								pos: position{line: 57, col: 84, offset: 1390},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 57, col: 84, offset: 1390},
										name: "Identifier",
									},
									&litMatcher{
										pos:        position{line: 57, col: 97, offset: 1403},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 102, offset: 1408},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 102, offset: 1408},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 57, col: 105, offset: 1411},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 109, offset: 1415},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 109, offset: 1415},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 57, col: 112, offset: 1418},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 117, offset: 1423},
								name: "OrExpression",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 130, offset: 1436},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 130, offset: 1436},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 57, col: 133, offset: 1439},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CollectionExpressionWithKey",
			pos:  position{line: 61, col: 1, offset: 1528},
			expr: &actionExpr{
				pos: position{line: 61, col: 32, offset: 1559},
				run: (*parser).callonCollectionExpressionWithKey1,
				expr: &seqExpr{
					pos: position{line: 61, col: 32, offset: 1559},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 61, col: 32, offset: 1559},
							label: "operator",
							expr: &choiceExpr{
								pos: position{line: 61, col: 42, offset: 1569},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 61, col: 42, offset: 1569},
										val:        "all",
										ignoreCase: false,
										want:       "\"all\"",
									},
									&litMatcher{
										pos:        position{line: 61, col: 48, offset: 1575},
										val:        "any",
										ignoreCase: false,
										want:       "\"any\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 61, col: 55, offset: 1582},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 61, col: 57, offset: 1584},
							label: "selector",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 66, offset: 1593},
								name: "Selector",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 61, col: 75, offset: 1602},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 61, col: 77, offset: 1604},
							val:        "as",
							ignoreCase: false,
							want:       "\"as\"",
						},
						&ruleRefExpr{
							pos:  position{line: 61, col: 82, offset: 1609},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 61, col: 84, offset: 1611},
							label: "key",
							expr: &choiceExpr{
								pos: position{line: 61, col: 89, offset: 1616},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 61, col: 89, offset: 1616},
										name: "Identifier",
									},
									&litMatcher{
										pos:        position{line: 61, col: 102, offset: 1629},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 61, col: 107, offset: 1634},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 107, offset: 1634},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 61, col: 110, offset: 1637},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 61, col: 114, offset: 1641},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 114, offset: 1641},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 61, col: 117, offset: 1644},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 61, col: 124, offset: 1651},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 61, col: 124, offset: 1651},
										name: "Identifier",
									},
									&litMatcher{
										pos:        position{line: 61, col: 137, offset: 1664},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 61, col: 142, offset: 1669},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 142, offset: 1669},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 61, col: 145, offset: 1672},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 61, col: 149, offset: 1676},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 149, offset: 1676},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 61, col: 152, offset: 1679},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 157, offset: 1684},
								name: "OrExpression",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 61, col: 170, offset: 1697},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 170, offset: 1697},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 61, col: 173, offset: 1700},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name:        "ParenthesizedExpression",
			displayName: "\"grouping\"",
			pos:         position{line: 90, col: 1, offset: 2160},
			expr: &choiceExpr{
				pos: position{line: 90, col: 39, offset: 2198},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 90, col: 39, offset: 2198},
						run: (*parser).callonParenthesizedExpression2,
						expr: &seqExpr{
							pos: position{line: 90, col: 39, offset: 2198},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 90, col: 39, offset: 2198},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 90, col: 43, offset: 2202},
									expr: &ruleRefExpr{
										pos:  position{line: 90, col: 43, offset: 2202},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 90, col: 46, offset: 2205},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 90, col: 51, offset: 2210},
										name: "OrExpression",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 90, col: 64, offset: 2223},
									expr: &ruleRefExpr{
										pos:  position{line: 90, col: 64, offset: 2223},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 90, col: 67, offset: 2226},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 92, col: 5, offset: 2256},
						run: (*parser).callonParenthesizedExpression12,
						expr: &labeledExpr{
							pos:   position{line: 92, col: 5, offset: 2256},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 10, offset: 2261},
								name: "MatchExpression",
							},
						},
					},
					&seqExpr{
						pos: position{line: 94, col: 5, offset: 2303},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 94, col: 5, offset: 2303},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&zeroOrOneExpr{
								pos: position{line: 94, col: 9, offset: 2307},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 9, offset: 2307},
									name: "_",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 12, offset: 2310},
								name: "OrExpression",
							},
							&zeroOrOneExpr{
								pos: position{line: 94, col: 25, offset: 2323},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 25, offset: 2323},
									name: "_",
								},
							},
							&notExpr{
								pos: position{line: 94, col: 28, offset: 2326},
								expr: &litMatcher{
									pos:        position{line: 94, col: 29, offset: 2327},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
							&andCodeExpr{
								pos: position{line: 94, col: 33, offset: 2331},
								run: (*parser).callonParenthesizedExpression24,
							},
						},
					},
				},
			},
		},
		{
			name:        "MatchExpression",
			displayName: "\"match\"",
			pos:         position{line: 98, col: 1, offset: 2390},
			expr: &choiceExpr{
				pos: position{line: 98, col: 28, offset: 2417},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 98, col: 28, offset: 2417},
						name: "MatchSelectorOpValue",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 51, offset: 2440},
						name: "MatchSelectorOp",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 69, offset: 2458},
						name: "MatchValueOpSelector",
					},
				},
			},
		},
		{
			name:        "MatchSelectorOpValue",
			displayName: "\"match\"",
			pos:         position{line: 100, col: 1, offset: 2480},
			expr: &actionExpr{
				pos: position{line: 100, col: 33, offset: 2512},
				run: (*parser).callonMatchSelectorOpValue1,
				expr: &seqExpr{
					pos: position{line: 100, col: 33, offset: 2512},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 100, col: 33, offset: 2512},
							label: "selector",
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 42, offset: 2521},
								name: "Selector",
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 51, offset: 2530},
							label: "operator",
							expr: &choiceExpr{
								pos: position{line: 100, col: 61, offset: 2540},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 100, col: 61, offset: 2540},
										name: "MatchEqual",
									},
									&ruleRefExpr{
										pos:  position{line: 100, col: 74, offset: 2553},
										name: "MatchNotEqual",
									},
									&ruleRefExpr{
										pos:  position{line: 100, col: 90, offset: 2569},
										name: "MatchContains",
									},
									&ruleRefExpr{
										pos:  position{line: 100, col: 106, offset: 2585},
										name: "MatchNotContains",
									},
									&ruleRefExpr{
										pos:  position{line: 100, col: 125, offset: 2604},
										name: "MatchMatches",
									},
									&ruleRefExpr{
										pos:  position{line: 100, col: 140, offset: 2619},
										name: "MatchNotMatches",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 157, offset: 2636},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 163, offset: 2642},
								name: "Value",
							},
						},
					},
				},
			},
		},
		{
			name:        "MatchSelectorOp",
			displayName: "\"match\"",
			pos:         position{line: 104, col: 1, offset: 2780},
			expr: &actionExpr{
				pos: position{line: 104, col: 28, offset: 2807},
				run: (*parser).callonMatchSelectorOp1,
				expr: &seqExpr{
					pos: position{line: 104, col: 28, offset: 2807},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 104, col: 28, offset: 2807},
							label: "selector",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 37, offset: 2816},
								name: "Selector",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 46, offset: 2825},
							label: "operator",
							expr: &choiceExpr{
								pos: position{line: 104, col: 56, offset: 2835},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 104, col: 56, offset: 2835},
										name: "MatchIsEmpty",
									},
									&ruleRefExpr{
										pos:  position{line: 104, col: 71, offset: 2850},
										name: "MatchIsNotEmpty",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "MatchValueOpSelector",
			displayName: "\"match\"",
			pos:         position{line: 108, col: 1, offset: 2983},
			expr: &choiceExpr{
				pos: position{line: 108, col: 33, offset: 3015},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 108, col: 33, offset: 3015},
						run: (*parser).callonMatchValueOpSelector2,
						expr: &seqExpr{
							pos: position{line: 108, col: 33, offset: 3015},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 108, col: 33, offset: 3015},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 39, offset: 3021},
										name: "Value",
									},
								},
								&labeledExpr{
									pos:   position{line: 108, col: 45, offset: 3027},
									label: "operator",
									expr: &choiceExpr{
										pos: position{line: 108, col: 55, offset: 3037},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 108, col: 55, offset: 3037},
												name: "MatchIn",
											},
											&ruleRefExpr{
												pos:  position{line: 108, col: 65, offset: 3047},
												name: "MatchNotIn",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 108, col: 77, offset: 3059},
									label: "selector",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 86, offset: 3068},
										name: "Selector",
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 110, col: 5, offset: 3210},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 110, col: 5, offset: 3210},
								name: "Value",
							},
							&labeledExpr{
								pos:   position{line: 110, col: 11, offset: 3216},
								label: "operator",
								expr: &choiceExpr{
									pos: position{line: 110, col: 21, offset: 3226},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 110, col: 21, offset: 3226},
											name: "MatchIn",
										},
										&ruleRefExpr{
											pos:  position{line: 110, col: 31, offset: 3236},
											name: "MatchNotIn",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 110, col: 43, offset: 3248},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 44, offset: 3249},
									name: "Selector",
								},
							},
							&andCodeExpr{
								pos: position{line: 110, col: 53, offset: 3258},
								run: (*parser).callonMatchValueOpSelector20,
							},
						},
					},
				},
			},
		},
		{
			name: "MatchEqual",
			pos:  position{line: 114, col: 1, offset: 3312},
			expr: &actionExpr{
				pos: position{line: 114, col: 15, offset: 3326},
				run: (*parser).callonMatchEqual1,
				expr: &seqExpr{
					pos: position{line: 114, col: 15, offset: 3326},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 114, col: 15, offset: 3326},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 15, offset: 3326},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 114, col: 18, offset: 3329},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 114, col: 23, offset: 3334},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 23, offset: 3334},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "MatchNotEqual",
			pos:  position{line: 117, col: 1, offset: 3367},
			expr: &actionExpr{
				pos: position{line: 117, col: 18, offset: 3384},
				run: (*parser).callonMatchNotEqual1,
				expr: &seqExpr{
					pos: position{line: 117, col: 18, offset: 3384},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 117, col: 18, offset: 3384},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 18, offset: 3384},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 117, col: 21, offset: 3387},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 117, col: 26, offset: 3392},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 26, offset: 3392},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "MatchIsEmpty",
			pos:  position{line: 120, col: 1, offset: 3428},
			expr: &actionExpr{
				pos: position{line: 120, col: 17, offset: 3444},
				run: (*parser).callonMatchIsEmpty1,
				expr: &seqExpr{
					pos: position{line: 120, col: 17, offset: 3444},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 120, col: 17, offset: 3444},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 120, col: 19, offset: 3446},
							val:        "is",
							ignoreCase: false,
							want:       "\"is\"",
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 24, offset: 3451},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 120, col: 26, offset: 3453},
							val:        "empty",
							ignoreCase: false,
							want:       "\"empty\"",
						},
					},
				},
			},
		},
		{
			name: "MatchIsNotEmpty",
			pos:  position{line: 123, col: 1, offset: 3493},
			expr: &actionExpr{
				pos: position{line: 123, col: 20, offset: 3512},
				run: (*parser).callonMatchIsNotEmpty1,
				expr: &seqExpr{
					pos: position{line: 123, col: 20, offset: 3512},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 123, col: 20, offset: 3512},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 123, col: 21, offset: 3513},
							val:        "is",
							ignoreCase: false,
							want:       "\"is\"",
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 26, offset: 3518},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 123, col: 28, offset: 3520},
							val:        "not",
							ignoreCase: false,
							want:       "\"not\"",
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 34, offset: 3526},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 123, col: 36, offset: 3528},
							val:        "empty",
							ignoreCase: false,
							want:       "\"empty\"",
						},
					},
				},
			},
		},
		{
			name: "MatchIn",
			pos:  position{line: 126, col: 1, offset: 3571},
			expr: &actionExpr{
				pos: position{line: 126, col: 12, offset: 3582},
				run: (*parser).callonMatchIn1,
				expr: &seqExpr{
					pos: position{line: 126, col: 12, offset: 3582},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 126, col: 12, offset: 3582},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 126, col: 14, offset: 3584},
							val:        "in",
							ignoreCase: false,
							want:       "\"in\"",
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 19, offset: 3589},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MatchNotIn",
			pos:  position{line: 129, col: 1, offset: 3618},
			expr: &actionExpr{
				pos: position{line: 129, col: 15, offset: 3632},
				run: (*parser).callonMatchNotIn1,
				expr: &seqExpr{
					pos: position{line: 129, col: 15, offset: 3632},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 129, col: 15, offset: 3632},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 129, col: 17, offset: 3634},
							val:        "not",
							ignoreCase: false,
							want:       "\"not\"",
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 23, offset: 3640},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 129, col: 25, offset: 3642},
							val:        "in",
							ignoreCase: false,
							want:       "\"in\"",
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 30, offset: 3647},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MatchContains",
			pos:  position{line: 132, col: 1, offset: 3679},
			expr: &actionExpr{
				pos: position{line: 132, col: 18, offset: 3696},
				run: (*parser).callonMatchContains1,
				expr: &seqExpr{
					pos: position{line: 132, col: 18, offset: 3696},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 132, col: 18, offset: 3696},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 132, col: 20, offset: 3698},
							val:        "contains",
							ignoreCase: false,
							want:       "\"contains\"",
						},
						&ruleRefExpr{
							pos:  position{line: 132, col: 31, offset: 3709},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MatchNotContains",
			pos:  position{line: 135, col: 1, offset: 3738},
			expr: &actionExpr{
				pos: position{line: 135, col: 21, offset: 3758},
				run: (*parser).callonMatchNotContains1,
				expr: &seqExpr{
					pos: position{line: 135, col: 21, offset: 3758},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 135, col: 21, offset: 3758},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 135, col: 23, offset: 3760},
							val:        "not",
							ignoreCase: false,
							want:       "\"not\"",
						},
						&ruleRefExpr{
							pos:  position{line: 135, col: 29, offset: 3766},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 135, col: 31, offset: 3768},
							val:        "contains",
							ignoreCase: false,
							want:       "\"contains\"",
						},
						&ruleRefExpr{
							pos:  position{line: 135, col: 42, offset: 3779},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MatchMatches",
			pos:  position{line: 138, col: 1, offset: 3811},
			expr: &actionExpr{
				pos: position{line: 138, col: 17, offset: 3827},
				run: (*parser).callonMatchMatches1,
				expr: &seqExpr{
					pos: position{line: 138, col: 17, offset: 3827},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 138, col: 17, offset: 3827},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 138, col: 19, offset: 3829},
							val:        "matches",
							ignoreCase: false,
							want:       "\"matches\"",
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 29, offset: 3839},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MatchNotMatches",
			pos:  position{line: 141, col: 1, offset: 3873},
			expr: &actionExpr{
				pos: position{line: 141, col: 20, offset: 3892},
				run: (*parser).callonMatchNotMatches1,
				expr: &seqExpr{
					pos: position{line: 141, col: 20, offset: 3892},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 141, col: 20, offset: 3892},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 141, col: 22, offset: 3894},
							val:        "not",
							ignoreCase: false,
							want:       "\"not\"",
						},
						&ruleRefExpr{
							pos:  position{line: 141, col: 28, offset: 3900},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 141, col: 30, offset: 3902},
							val:        "matches",
							ignoreCase: false,
							want:       "\"matches\"",
						},
						&ruleRefExpr{
							pos:  position{line: 141, col: 40, offset: 3912},
							name: "_",
						},
					},
				},
			},
		},
		{
			name:        "Selector",
			displayName: "\"selector\"",
			pos:         position{line: 145, col: 1, offset: 3950},
			expr: &choiceExpr{
				pos: position{line: 145, col: 24, offset: 3973},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 145, col: 24, offset: 3973},
						run: (*parser).callonSelector2,
						expr: &seqExpr{
							pos: position{line: 145, col: 24, offset: 3973},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 145, col: 24, offset: 3973},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 30, offset: 3979},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 145, col: 41, offset: 3990},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 145, col: 46, offset: 3995},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 46, offset: 3995},
											name: "SelectorOrIndex",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 4259},
						run: (*parser).callonSelector9,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 4259},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 156, col: 5, offset: 4259},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 156, col: 9, offset: 4263},
									label: "ptrsegs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 156, col: 17, offset: 4271},
										expr: &ruleRefExpr{
											pos:  position{line: 156, col: 17, offset: 4271},
											name: "JsonPointerSegment",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 156, col: 37, offset: 4291},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JsonPointerSegment",
			pos:  position{line: 177, col: 1, offset: 4769},
			expr: &actionExpr{
				pos: position{line: 177, col: 23, offset: 4791},
				run: (*parser).callonJsonPointerSegment1,
				expr: &seqExpr{
					pos: position{line: 177, col: 23, offset: 4791},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 177, col: 23, offset: 4791},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 27, offset: 4795},
							label: "ident",
							expr: &oneOrMoreExpr{
								pos: position{line: 177, col: 33, offset: 4801},
								expr: &charClassMatcher{
									pos:        position{line: 177, col: 33, offset: 4801},
									val:        "[\\pL\\pN-_.~:|]",
									chars:      []rune{'-', '_', '.', '~', ':', '|'},
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 181, col: 1, offset: 4856},
			expr: &actionExpr{
				pos: position{line: 181, col: 15, offset: 4870},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 181, col: 15, offset: 4870},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 181, col: 15, offset: 4870},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 181, col: 24, offset: 4879},
							expr: &charClassMatcher{
								pos:        position{line: 181, col: 24, offset: 4879},
								val:        "[a-zA-Z0-9_/]",
								chars:      []rune{'_', '/'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SelectorOrIndex",
			pos:  position{line: 185, col: 1, offset: 4929},
			expr: &choiceExpr{
				pos: position{line: 185, col: 20, offset: 4948},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 185, col: 20, offset: 4948},
						run: (*parser).callonSelectorOrIndex2,
						expr: &seqExpr{
							pos: position{line: 185, col: 20, offset: 4948},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 185, col: 20, offset: 4948},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 185, col: 24, offset: 4952},
									label: "ident",
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 30, offset: 4958},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 187, col: 5, offset: 4996},
						run: (*parser).callonSelectorOrIndex7,
						expr: &labeledExpr{
							pos:   position{line: 187, col: 5, offset: 4996},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 10, offset: 5001},
								name: "IndexExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 5043},
						run: (*parser).callonSelectorOrIndex10,
						expr: &seqExpr{
							pos: position{line: 189, col: 5, offset: 5043},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 189, col: 5, offset: 5043},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 9, offset: 5047},
									label: "idx",
									expr: &oneOrMoreExpr{
										pos: position{line: 189, col: 13, offset: 5051},
										expr: &charClassMatcher{
											pos:        position{line: 189, col: 13, offset: 5051},
											val:        "[0-9]",
											ranges:     []rune{'0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "IndexExpression",
			displayName: "\"index\"",
			pos:         position{line: 193, col: 1, offset: 5097},
			expr: &choiceExpr{
				pos: position{line: 193, col: 28, offset: 5124},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 193, col: 28, offset: 5124},
						run: (*parser).callonIndexExpression2,
						expr: &seqExpr{
							pos: position{line: 193, col: 28, offset: 5124},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 193, col: 28, offset: 5124},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 193, col: 32, offset: 5128},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 32, offset: 5128},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 193, col: 35, offset: 5131},
									label: "lit",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 39, offset: 5135},
										name: "StringLiteral",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 193, col: 53, offset: 5149},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 53, offset: 5149},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 56, offset: 5152},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 195, col: 5, offset: 5181},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 195, col: 5, offset: 5181},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&zeroOrOneExpr{
								pos: position{line: 195, col: 9, offset: 5185},
								expr: &ruleRefExpr{
									pos:  position{line: 195, col: 9, offset: 5185},
									name: "_",
								},
							},
							&notExpr{
								pos: position{line: 195, col: 12, offset: 5188},
								expr: &ruleRefExpr{
									pos:  position{line: 195, col: 13, offset: 5189},
									name: "StringLiteral",
								},
							},
							&andCodeExpr{
								pos: position{line: 195, col: 27, offset: 5203},
								run: (*parser).callonIndexExpression18,
							},
						},
					},
					&seqExpr{
						pos: position{line: 197, col: 5, offset: 5255},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 197, col: 5, offset: 5255},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&zeroOrOneExpr{
								pos: position{line: 197, col: 9, offset: 5259},
								expr: &ruleRefExpr{
									pos:  position{line: 197, col: 9, offset: 5259},
									name: "_",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 197, col: 12, offset: 5262},
								name: "StringLiteral",
							},
							&zeroOrOneExpr{
								pos: position{line: 197, col: 26, offset: 5276},
								expr: &ruleRefExpr{
									pos:  position{line: 197, col: 26, offset: 5276},
									name: "_",
								},
							},
							&notExpr{
								pos: position{line: 197, col: 29, offset: 5279},
								expr: &litMatcher{
									pos:        position{line: 197, col: 30, offset: 5280},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
							&andCodeExpr{
								pos: position{line: 197, col: 34, offset: 5284},
								run: (*parser).callonIndexExpression28,
							},
						},
					},
				},
			},
		},
		{
			name:        "Value",
			displayName: "\"value\"",
			pos:         position{line: 201, col: 1, offset: 5347},
			expr: &choiceExpr{
				pos: position{line: 201, col: 18, offset: 5364},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 201, col: 18, offset: 5364},
						run: (*parser).callonValue2,
						expr: &labeledExpr{
							pos:   position{line: 201, col: 18, offset: 5364},
							label: "selector",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 27, offset: 5373},
								name: "Selector",
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 5, offset: 5449},
						run: (*parser).callonValue5,
						expr: &labeledExpr{
							pos:   position{line: 203, col: 5, offset: 5449},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 7, offset: 5451},
								name: "NumberLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 205, col: 5, offset: 5515},
						run: (*parser).callonValue8,
						expr: &labeledExpr{
							pos:   position{line: 205, col: 5, offset: 5515},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 7, offset: 5517},
								name: "StringLiteral",
							},
						},
					},
				},
			},
		},
		{
			name:        "NumberLiteral",
			displayName: "\"number\"",
			pos:         position{line: 209, col: 1, offset: 5580},
			expr: &choiceExpr{
				pos: position{line: 209, col: 27, offset: 5606},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 209, col: 27, offset: 5606},
						run: (*parser).callonNumberLiteral2,
						expr: &seqExpr{
							pos: position{line: 209, col: 27, offset: 5606},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 209, col: 27, offset: 5606},
									expr: &litMatcher{
										pos:        position{line: 209, col: 27, offset: 5606},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 209, col: 32, offset: 5611},
									name: "IntegerOrFloat",
								},
								&andExpr{
									pos: position{line: 209, col: 47, offset: 5626},
									expr: &ruleRefExpr{
										pos:  position{line: 209, col: 48, offset: 5627},
										name: "AfterNumbers",
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 211, col: 5, offset: 5676},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 211, col: 5, offset: 5676},
								expr: &litMatcher{
									pos:        position{line: 211, col: 5, offset: 5676},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 211, col: 10, offset: 5681},
								name: "IntegerOrFloat",
							},
							&notExpr{
								pos: position{line: 211, col: 25, offset: 5696},
								expr: &ruleRefExpr{
									pos:  position{line: 211, col: 26, offset: 5697},
									name: "AfterNumbers",
								},
							},
							&andCodeExpr{
								pos: position{line: 211, col: 39, offset: 5710},
								run: (*parser).callonNumberLiteral15,
							},
						},
					},
				},
			},
		},
		{
			name: "AfterNumbers",
			pos:  position{line: 215, col: 1, offset: 5770},
			expr: &andExpr{
				pos: position{line: 215, col: 17, offset: 5786},
				expr: &choiceExpr{
					pos: position{line: 215, col: 19, offset: 5788},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 215, col: 19, offset: 5788},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 23, offset: 5792},
							name: "EOF",
						},
						&litMatcher{
							pos:        position{line: 215, col: 29, offset: 5798},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IntegerOrFloat",
			pos:  position{line: 217, col: 1, offset: 5804},
			expr: &seqExpr{
				pos: position{line: 217, col: 19, offset: 5822},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 217, col: 20, offset: 5823},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 217, col: 20, offset: 5823},
								val:        "0",
								ignoreCase: false,
								want:       "\"0\"",
							},
							&seqExpr{
								pos: position{line: 217, col: 26, offset: 5829},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 217, col: 26, offset: 5829},
										val:        "[1-9]",
										ranges:     []rune{'1', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 217, col: 31, offset: 5834},
										expr: &charClassMatcher{
											pos:        position{line: 217, col: 31, offset: 5834},
											val:        "[0-9]",
											ranges:     []rune{'0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 217, col: 39, offset: 5842},
						expr: &seqExpr{
							pos: position{line: 217, col: 40, offset: 5843},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 217, col: 40, offset: 5843},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 217, col: 44, offset: 5847},
									expr: &charClassMatcher{
										pos:        position{line: 217, col: 44, offset: 5847},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "StringLiteral",
			displayName: "\"string\"",
			pos:         position{line: 219, col: 1, offset: 5857},
			expr: &choiceExpr{
				pos: position{line: 219, col: 27, offset: 5883},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 219, col: 27, offset: 5883},
						run: (*parser).callonStringLiteral2,
						expr: &choiceExpr{
							pos: position{line: 219, col: 28, offset: 5884},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 219, col: 28, offset: 5884},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 219, col: 28, offset: 5884},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 219, col: 32, offset: 5888},
											expr: &ruleRefExpr{
												pos:  position{line: 219, col: 32, offset: 5888},
												name: "RawStringChar",
											},
										},
										&litMatcher{
											pos:        position{line: 219, col: 47, offset: 5903},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 219, col: 53, offset: 5909},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 219, col: 53, offset: 5909},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 219, col: 57, offset: 5913},
											expr: &ruleRefExpr{
												pos:  position{line: 219, col: 57, offset: 5913},
												name: "DoubleStringChar",
											},
										},
										&litMatcher{
											pos:        position{line: 219, col: 75, offset: 5931},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 221, col: 5, offset: 5983},
						exprs: []any{
							&choiceExpr{
								pos: position{line: 221, col: 6, offset: 5984},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 221, col: 6, offset: 5984},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 221, col: 6, offset: 5984},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 221, col: 10, offset: 5988},
												expr: &ruleRefExpr{
													pos:  position{line: 221, col: 10, offset: 5988},
													name: "RawStringChar",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 221, col: 27, offset: 6005},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 221, col: 27, offset: 6005},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 221, col: 31, offset: 6009},
												expr: &ruleRefExpr{
													pos:  position{line: 221, col: 31, offset: 6009},
													name: "DoubleStringChar",
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 221, col: 50, offset: 6028},
								name: "EOF",
							},
							&andCodeExpr{
								pos: position{line: 221, col: 54, offset: 6032},
								run: (*parser).callonStringLiteral25,
							},
						},
					},
				},
			},
		},
		{
			name: "RawStringChar",
			pos:  position{line: 225, col: 1, offset: 6096},
			expr: &seqExpr{
				pos: position{line: 225, col: 18, offset: 6113},
				exprs: []any{
					&notExpr{
						pos: position{line: 225, col: 18, offset: 6113},
						expr: &litMatcher{
							pos:        position{line: 225, col: 19, offset: 6114},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
					&anyMatcher{
						line: 225, col: 23, offset: 6118,
					},
				},
			},
		},
		{
			name: "DoubleStringChar",
			pos:  position{line: 226, col: 1, offset: 6120},
			expr: &seqExpr{
				pos: position{line: 226, col: 21, offset: 6140},
				exprs: []any{
					&notExpr{
						pos: position{line: 226, col: 21, offset: 6140},
						expr: &litMatcher{
							pos:        position{line: 226, col: 22, offset: 6141},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
					&anyMatcher{
						line: 226, col: 26, offset: 6145,
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 228, col: 1, offset: 6148},
			expr: &oneOrMoreExpr{
				pos: position{line: 228, col: 19, offset: 6166},
				expr: &charClassMatcher{
					pos:        position{line: 228, col: 19, offset: 6166},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 230, col: 1, offset: 6178},
			expr: &notExpr{
				pos: position{line: 230, col: 8, offset: 6185},
				expr: &anyMatcher{
					line: 230, col: 9, offset: 6186,
				},
			},
		},
	},
}

func (c *current) onInput2(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonInput2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput2(stack["expr"])
}

func (c *current) onInput17(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonInput17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput17(stack["expr"])
}

func (c *current) onOrExpression2(left, right any) (any, error) {
	return &BinaryExpression{
		Operator: BinaryOpOr,
		Left:     left.(Expression),
		Right:    right.(Expression),
	}, nil
}

func (p *parser) callonOrExpression2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression2(stack["left"], stack["right"])
}

func (c *current) onOrExpression11(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonOrExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression11(stack["expr"])
}

func (c *current) onOrExpression14(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonOrExpression14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression14(stack["expr"])
}

func (c *current) onOrExpression17(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonOrExpression17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression17(stack["expr"])
}

func (c *current) onAndExpression2(left, right any) (any, error) {
	return &BinaryExpression{
		Operator: BinaryOpAnd,
		Left:     left.(Expression),
		Right:    right.(Expression),
	}, nil
}

func (p *parser) callonAndExpression2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression2(stack["left"], stack["right"])
}

func (c *current) onAndExpression11(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonAndExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression11(stack["expr"])
}

func (c *current) onNotExpression2(expr any) (any, error) {
	if unary, ok := expr.(*UnaryExpression); ok && unary.Operator == UnaryOpNot {
		// small optimization to get rid unnecessary levels of AST nodes
		// for things like:  not not foo == 3  which is equivalent to foo == 3
		return unary.Operand, nil
	}

	return &UnaryExpression{
		Operator: UnaryOpNot,
		Operand:  expr.(Expression),
	}, nil
}

func (p *parser) callonNotExpression2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpression2(stack["expr"])
}

func (c *current) onNotExpression8(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNotExpression8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpression8(stack["expr"])
}

func (c *current) onCollectionExpression1(operator, selector, ident, expr any) (any, error) {
	return c.onCollectionExpressionWithKey1(operator, selector, ident, "", expr)
}

func (p *parser) callonCollectionExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCollectionExpression1(stack["operator"], stack["selector"], stack["ident"], stack["expr"])
}

func (c *current) onCollectionExpressionWithKey1(operator, selector, key, value, expr any) (any, error) {
	ce := &CollectionExpression{
		Selector: selector.(Selector),
		Inner:    expr.(Expression),
	}

	if string(operator.([]byte)) == "all" {
		ce.Type = AllExpression
	} else {
		ce.Type = AnyExpression
	}

	switch k := key.(type) {
	case string:
		ce.Key = k
	default:
		ce.Key = "_"
	}

	switch v := value.(type) {
	case string:
		ce.Value = v
	default:
		ce.Value = "_"
	}

	return ce, nil
}

func (p *parser) callonCollectionExpressionWithKey1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCollectionExpressionWithKey1(stack["operator"], stack["selector"], stack["key"], stack["value"], stack["expr"])
}

func (c *current) onParenthesizedExpression2(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonParenthesizedExpression2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenthesizedExpression2(stack["expr"])
}

func (c *current) onParenthesizedExpression12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonParenthesizedExpression12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenthesizedExpression12(stack["expr"])
}

func (c *current) onParenthesizedExpression24() (bool, error) {
	return false, errors.New("Unmatched parentheses")
}

func (p *parser) callonParenthesizedExpression24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenthesizedExpression24()
}

func (c *current) onMatchSelectorOpValue1(selector, operator, value any) (any, error) {
	return &MatchExpression{Selector: selector.(Selector), Operator: operator.(MatchOperator), Value: value.(*MatchValue)}, nil
}

func (p *parser) callonMatchSelectorOpValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchSelectorOpValue1(stack["selector"], stack["operator"], stack["value"])
}

func (c *current) onMatchSelectorOp1(selector, operator any) (any, error) {
	return &MatchExpression{Selector: selector.(Selector), Operator: operator.(MatchOperator), Value: nil}, nil
}

func (p *parser) callonMatchSelectorOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchSelectorOp1(stack["selector"], stack["operator"])
}

func (c *current) onMatchValueOpSelector2(value, operator, selector any) (any, error) {
	return &MatchExpression{Selector: selector.(Selector), Operator: operator.(MatchOperator), Value: value.(*MatchValue)}, nil
}

func (p *parser) callonMatchValueOpSelector2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchValueOpSelector2(stack["value"], stack["operator"], stack["selector"])
}

func (c *current) onMatchValueOpSelector20(operator any) (bool, error) {
	return false, errors.New("Invalid selector")
}

func (p *parser) callonMatchValueOpSelector20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchValueOpSelector20(stack["operator"])
}

func (c *current) onMatchEqual1() (any, error) {
	return MatchEqual, nil
}

func (p *parser) callonMatchEqual1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchEqual1()
}

func (c *current) onMatchNotEqual1() (any, error) {
	return MatchNotEqual, nil
}

func (p *parser) callonMatchNotEqual1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchNotEqual1()
}

func (c *current) onMatchIsEmpty1() (any, error) {
	return MatchIsEmpty, nil
}

func (p *parser) callonMatchIsEmpty1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchIsEmpty1()
}

func (c *current) onMatchIsNotEmpty1() (any, error) {
	return MatchIsNotEmpty, nil
}

func (p *parser) callonMatchIsNotEmpty1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchIsNotEmpty1()
}

func (c *current) onMatchIn1() (any, error) {
	return MatchIn, nil
}

func (p *parser) callonMatchIn1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchIn1()
}

func (c *current) onMatchNotIn1() (any, error) {
	return MatchNotIn, nil
}

func (p *parser) callonMatchNotIn1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchNotIn1()
}

func (c *current) onMatchContains1() (any, error) {
	return MatchIn, nil
}

func (p *parser) callonMatchContains1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchContains1()
}

func (c *current) onMatchNotContains1() (any, error) {
	return MatchNotIn, nil
}

func (p *parser) callonMatchNotContains1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchNotContains1()
}

func (c *current) onMatchMatches1() (any, error) {
	return MatchMatches, nil
}

func (p *parser) callonMatchMatches1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchMatches1()
}

func (c *current) onMatchNotMatches1() (any, error) {
	return MatchNotMatches, nil
}

func (p *parser) callonMatchNotMatches1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchNotMatches1()
}

func (c *current) onSelector2(first, rest any) (any, error) {
	sel := Selector{
		Type: SelectorTypeBexpr,
		Path: []string{first.(string)},
	}
	if rest != nil {
		for _, v := range rest.([]interface{}) {
			sel.Path = append(sel.Path, v.(string))
		}
	}
	return sel, nil
}

func (p *parser) callonSelector2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector2(stack["first"], stack["rest"])
}

func (c *current) onSelector9(ptrsegs any) (any, error) {
	sel := Selector{
		Type: SelectorTypeJsonPointer,
	}
	if ptrsegs != nil {
		for _, v := range ptrsegs.([]interface{}) {
			sel.Path = append(sel.Path, v.(string))
		}
	}

	// Validate and cache
	ptrStr := fmt.Sprintf("/%s", strings.Join(sel.Path, "/"))
	ptr, err := pointerstructure.Parse(ptrStr)
	if err != nil {
		return nil, fmt.Errorf("error validating json pointer: %w", err)
	}
	sel.Path = ptr.Parts

	return sel, nil
}

func (p *parser) callonSelector9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector9(stack["ptrsegs"])
}

func (c *current) onJsonPointerSegment1(ident any) (any, error) {
	return string(c.text)[1:], nil
}

func (p *parser) callonJsonPointerSegment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJsonPointerSegment1(stack["ident"])
}

func (c *current) onIdentifier1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onSelectorOrIndex2(ident any) (any, error) {
	return ident, nil
}

func (p *parser) callonSelectorOrIndex2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectorOrIndex2(stack["ident"])
}

func (c *current) onSelectorOrIndex7(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonSelectorOrIndex7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectorOrIndex7(stack["expr"])
}

func (c *current) onSelectorOrIndex10(idx any) (any, error) {
	return string(c.text)[1:], nil
}

func (p *parser) callonSelectorOrIndex10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectorOrIndex10(stack["idx"])
}

func (c *current) onIndexExpression2(lit any) (any, error) {
	return lit, nil
}

func (p *parser) callonIndexExpression2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression2(stack["lit"])
}

func (c *current) onIndexExpression18() (bool, error) {
	return false, errors.New("Invalid index")
}

func (p *parser) callonIndexExpression18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression18()
}

func (c *current) onIndexExpression28() (bool, error) {
	return false, errors.New("Unclosed index expression")
}

func (p *parser) callonIndexExpression28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression28()
}

func (c *current) onValue2(selector any) (any, error) {
	return &MatchValue{Raw: selector.(Selector).String()}, nil
}

func (p *parser) callonValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue2(stack["selector"])
}

func (c *current) onValue5(n any) (any, error) {
	return &MatchValue{Raw: n.(string)}, nil
}

func (p *parser) callonValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue5(stack["n"])
}

func (c *current) onValue8(s any) (any, error) {
	return &MatchValue{Raw: s.(string)}, nil
}

func (p *parser) callonValue8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue8(stack["s"])
}

func (c *current) onNumberLiteral2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNumberLiteral2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberLiteral2()
}

func (c *current) onNumberLiteral15() (bool, error) {
	return false, errors.New("Invalid number literal")
}

func (p *parser) callonNumberLiteral15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberLiteral15()
}

func (c *current) onStringLiteral2() (any, error) {
	return strconv.Unquote(string(c.text))
}

func (p *parser) callonStringLiteral2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral2()
}

func (c *current) onStringLiteral25() (bool, error) {
	return false, errors.New("Unterminated string literal")
}

func (p *parser) callonStringLiteral25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral25()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
